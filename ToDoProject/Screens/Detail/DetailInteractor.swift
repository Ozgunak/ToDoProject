//
//  DetailInteractor.swift
//  ToDoProject
//
//  Created by ozgun on 31.01.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailBusinessLogic {
    func createTodo(request: DetailTodo.CreateTodo.Request)
    func fetchTodo(request: DetailTodo.FetchTodo.Request)
    func editTodo(request: DetailTodo.EditTodo.Request)
    func deleteNotification(with notificationId: String)
}

protocol DetailDataStore {
    var id: Int? { get set }
    var todo: TodoItem? { get set }
}

class DetailInteractor: DetailBusinessLogic, DetailDataStore {
    
    
    var id: Int?
    var todo: TodoItem?
    
    var presenter: DetailPresentationLogic?
    var worker = DetailWorker(coreData: CoreDataManager(), notificationManager: NotificationManager())
    
    // MARK: CRUD operations
    
    func createTodo(request: DetailTodo.CreateTodo.Request) {
        let title = request.todoField.title
        let description = request.todoField.description
        let notificationId = UUID().uuidString
        let date = request.todoField.notificationDate
        if date != NSDate.distantPast {
            worker.createNotification(notificationId: notificationId, title: title, description: description, notificationDate: date) { notificationSuccess in
                if notificationSuccess == true {
                    self.worker.createTodoWithDate(title: title, description: description, notificationDate: date, notificationId: notificationId) { isSuccess in
                        let response = DetailTodo.EditTodo.Response(isSuccess: isSuccess, notificationSuccess: notificationSuccess)
                        self.presenter?.presentEditTodo(response: response)
                    }
                }else {
                    self.worker.createTodo(title: title, description: description, notificationDate: date) { isSuccess in
                        let response = DetailTodo.CreateTodo.Response(isSuccess: isSuccess)
                        self.presenter?.presentCreateTodo(response: response)
                    }
                }
            }
        }else {
            worker.createTodo(title: title, description: description, notificationDate: date) { isSuccess in
                let response = DetailTodo.CreateTodo.Response(isSuccess: isSuccess)
                self.presenter?.presentCreateTodo(response: response)
            }
        }
        
    }
    
    
    func fetchTodo(request: DetailTodo.FetchTodo.Request) {
        self.presenter?.presentTodo(response: .init(todo: todo))
    }
    
    func editTodo(request: DetailTodo.EditTodo.Request) {
        let title = request.todoField.title
        let description = request.todoField.description
        let notificationDate = request.todoField.notificationDate
        let notificationId = request.todoField.notificationId
        if notificationDate == NSDate.distantPast || notificationDate < Date(){
            // while editting if it has id and notification switch is off then delete notification.
            if let notificationId = notificationId {
                deleteNotification(with: notificationId)
            }
            worker.editTodo(id: id!, title: title, description: description) { (isSuccess) in
                let response = DetailTodo.EditTodo.Response(isSuccess: isSuccess, notificationSuccess: nil)
                self.presenter?.presentEditTodo(response: response)
            }
        }else {
            // if no past notifications
            let newId = UUID().uuidString
            worker.createNotification(notificationId: newId, title: title, description: description, notificationDate: notificationDate) { notificationSuccess in
                if notificationSuccess == true {
                    self.worker.editTodoWithDate(id: self.id!, title: title, description: description, notificationDate: notificationDate, notificationId: newId) { isSuccess in
                        let response = DetailTodo.EditTodo.Response(isSuccess: isSuccess, notificationSuccess: notificationSuccess)
                        self.presenter?.presentEditTodo(response: response)
                    }
                }else {
                    self.worker.editTodo(id: self.id!, title: title, description: description) { (isSuccess) in
                        let response = DetailTodo.EditTodo.Response(isSuccess: isSuccess, notificationSuccess: nil)
                        self.presenter?.presentEditTodo(response: response)
                    }
                }
            }
        }
    }
    func deleteNotification(with notificationId: String) {
        worker.deleteNotification(with: notificationId)
    }
}
