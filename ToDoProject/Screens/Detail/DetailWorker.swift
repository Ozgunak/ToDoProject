//
//  DetailWorker.swift
//  ToDoProject
//
//  Created by ozgun on 31.01.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailStoreProtocol {
    func createTodo(title: String, description: String, completionHandler: @escaping (() throws -> Bool?) -> Void)
    func fetchTodo(id: Int, completionHandler: @escaping (() throws -> TodoItem?) -> Void)
    func editTodo(id: Int, title: String, description: String, completionHandler: @escaping (() throws -> Bool?) -> Void)
    func editTime(id: Int, time: Double, completionHandler: @escaping (() throws -> Bool?) -> Void)
}
protocol TodosStoreProtocol {
    func fetchTodos(completionHandler: @escaping (() throws -> [TodoItem]) -> Void)
    func checkTodo(todoIdToCheck: Int, completionHandler: @escaping (() throws -> Int, TodoItem?) -> Void)
}
class DetailWorker {
    var coreData = CoreDataManager()
    var todosStore: DetailStoreProtocol
    init(todosStore: DetailStoreProtocol) {
        self.todosStore = todosStore
    }
    
    func createTodo(title: String, description: String, completionHandler: @escaping (Bool?) -> Void) {
//        coreData.saveTodo(title: title, description: description, isDone: false) { onSuccess in
//            print("saved =\(onSuccess)")
//            completionHandler { return onSuccess }
//        }
        todosStore.createTodo(title: title, description: description) {
            (success: () throws -> Bool?) -> Void in
            do {
                let success = try success()
                DispatchQueue.main.async {
                    completionHandler(success)
                }
            } catch {
                DispatchQueue.main.async {
                    completionHandler(nil)
                }
            }
        }
    }
    

    func fetchTodo(id: Int, completionHandler: @escaping (TodoItem?) -> Void) {
        todosStore.fetchTodo(id: id) { (todo: () throws -> TodoItem?) -> Void in
            do {
                let todo = try todo()
                DispatchQueue.main.async {
                    completionHandler(todo)
                }
            } catch {
                DispatchQueue.main.async {
                    completionHandler(nil)
                }
            }
        }
    }
    
    func editTodo(id: Int, title: String, description: String, completionHandler: @escaping (Bool?) -> Void) {
        todosStore.editTodo(id: id, title: title, description: description) {
            (success: () throws -> Bool?) -> Void in
            do {
                let success = try success()
                DispatchQueue.main.async {
                    completionHandler(success)
                }
            } catch {
                DispatchQueue.main.async {
                    completionHandler(nil)
                }
            }
        }
    }
    
    func editTime(id: Int, time: Double, completionHandler: @escaping (Bool?) -> Void) {
        todosStore.editTime(id: id, time: time) {
            (success: () throws -> Bool?) -> Void in
            do {
                let success = try success()
                DispatchQueue.main.async {
                    completionHandler(success)
                }
            } catch {
                DispatchQueue.main.async {
                    completionHandler(nil)
                }
            }
        }
    }

}
