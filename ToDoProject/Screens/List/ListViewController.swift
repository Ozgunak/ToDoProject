//
//  ListViewController.swift
//  ToDoProject
//
//  Created by ozgun on 31.01.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListDisplayLogic: AnyObject {
    func displayTodoList(viewModel: List.FetchTodos.ViewModel)
    func displayUpdatedTodoList(viewModel: List.CheckTodo.ViewModel)
}

class ListViewController: UIViewController, ListDisplayLogic {

    
    @IBOutlet weak var tableView: UITableView!
    
    var interactor: ListBusinessLogic?
  var router: (NSObjectProtocol & ListRoutingLogic & ListDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup() {
    let viewController = self
    let interactor = ListInteractor()
    let presenter = ListPresenter()
    let router = ListRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad() {
      super.viewDidLoad()
      fetchTodos()
      let nib = UINib(nibName: K.nibName, bundle: nil)
      tableView.register(nib, forCellReuseIdentifier: K.listCell)
  }
  
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        fetchTodos()
    }
    
  // MARK: Do something
  
  
    var displayedTodos: [List.FetchTodos.ViewModel.DisplayedTodo] = []{
        didSet{
            print("didset")
            self.tableView.reloadData()
        }
    }

    func fetchTodos() {
        let request = List.FetchTodos.Request()
        interactor?.fetchTodos(request: request)
    }

    func displayTodoList(viewModel: List.FetchTodos.ViewModel) {
        displayedTodos = viewModel.displayedTodos
        print("displayed todos")
    }

    func displayUpdatedTodoList(viewModel: List.CheckTodo.ViewModel) {
        displayedTodos[viewModel.row].isDone = viewModel.todo.isDone
        tableView.reloadData()
    }
}

//MARK: - Table View Data Source

extension ListViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displayedTodos.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: K.listCell, for: indexPath) as! ListTableViewCell
        let displatedData = displayedTodos[indexPath.row]
        cell.listLabel.text = displatedData.title
        return cell
    }
    
    
}

//MARK: - Table View Delegate
extension ListViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        router?.routeToDetailTodo(index: indexPath.row)
    }
}
